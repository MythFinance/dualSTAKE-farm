{
    "hints": {
        "project_apr(application,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "output": {
                    "name": "APRBreakdown",
                    "elements": [
                        [
                            "balance",
                            "uint64"
                        ],
                        [
                            "staked",
                            "uint64"
                        ],
                        [
                            "current_block_bonus",
                            "uint64"
                        ],
                        [
                            "current_avg_block_payout",
                            "uint64"
                        ],
                        [
                            "current_farm_amount",
                            "uint64"
                        ],
                        [
                            "current_farm_amount_algo",
                            "uint64"
                        ],
                        [
                            "override_farm_amount",
                            "uint64"
                        ],
                        [
                            "override_farm_amount_algo",
                            "uint64"
                        ],
                        [
                            "avg_round_time",
                            "uint64"
                        ],
                        [
                            "online_stake",
                            "uint64"
                        ],
                        [
                            "expected_yearly_blocks",
                            "uint64"
                        ],
                        [
                            "base_apr_bps",
                            "uint64"
                        ],
                        [
                            "farm_apr_bps",
                            "uint64"
                        ],
                        [
                            "override_farm_apr_bps",
                            "uint64"
                        ]
                    ]
                }
            }
        },
        "get_algo_cost(application,asset,uint64)(uint64,uint64,uint64,uint64,uint64,uint64)": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "output": {
                    "name": "AlgoCost",
                    "elements": [
                        [
                            "total_cost",
                            "uint64"
                        ],
                        [
                            "optin_cost",
                            "uint64"
                        ],
                        [
                            "box_cost",
                            "uint64"
                        ],
                        [
                            "platform_cost",
                            "uint64"
                        ],
                        [
                            "ix_cost",
                            "uint64"
                        ],
                        [
                            "txn_fee_cost",
                            "uint64"
                        ]
                    ]
                }
            }
        },
        "get_algo_cost_and_max_duration(application,asset,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64)": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "output": {
                    "name": "AlgoCostAndMaxDuration",
                    "elements": [
                        [
                            "total_cost",
                            "uint64"
                        ],
                        [
                            "optin_cost",
                            "uint64"
                        ],
                        [
                            "box_cost",
                            "uint64"
                        ],
                        [
                            "platform_cost",
                            "uint64"
                        ],
                        [
                            "ix_cost",
                            "uint64"
                        ],
                        [
                            "txn_fee_cost",
                            "uint64"
                        ],
                        [
                            "max_duration",
                            "uint64"
                        ]
                    ]
                }
            }
        },
        "create_farm(application,asset,uint64,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "extend_duration_blocks(application,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "extend_amount_per_block(application,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "payout(application,uint64,bool)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "noop()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "withdraw_fees(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "optout(asset)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "update_max_duration_days(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "update_min_duration_blocks(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "get_state(application)(uint64,uint64,uint64,uint64)": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "output": {
                    "name": "FarmState",
                    "elements": [
                        [
                            "farm_asset",
                            "uint64"
                        ],
                        [
                            "amount_per_block",
                            "uint64"
                        ],
                        [
                            "remaining_duration_blocks",
                            "uint64"
                        ],
                        [
                            "last_block_paid",
                            "uint64"
                        ]
                    ]
                }
            }
        },
        "log_states(uint64[])void": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "get_state_and_apr(uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "output": {
                    "name": "FarmStateAndAPR",
                    "elements": [
                        [
                            "balance",
                            "uint64"
                        ],
                        [
                            "staked",
                            "uint64"
                        ],
                        [
                            "current_block_bonus",
                            "uint64"
                        ],
                        [
                            "current_avg_block_payout",
                            "uint64"
                        ],
                        [
                            "current_farm_amount",
                            "uint64"
                        ],
                        [
                            "current_farm_amount_algo",
                            "uint64"
                        ],
                        [
                            "override_farm_amount",
                            "uint64"
                        ],
                        [
                            "override_farm_amount_algo",
                            "uint64"
                        ],
                        [
                            "avg_round_time",
                            "uint64"
                        ],
                        [
                            "online_stake",
                            "uint64"
                        ],
                        [
                            "expected_yearly_blocks",
                            "uint64"
                        ],
                        [
                            "base_apr_bps",
                            "uint64"
                        ],
                        [
                            "farm_apr_bps",
                            "uint64"
                        ],
                        [
                            "override_farm_apr_bps",
                            "uint64"
                        ],
                        [
                            "farm_asset",
                            "uint64"
                        ],
                        [
                            "amount_per_block",
                            "uint64"
                        ],
                        [
                            "remaining_duration_blocks",
                            "uint64"
                        ],
                        [
                            "last_block_paid",
                            "uint64"
                        ]
                    ]
                }
            }
        },
        "log_states_and_aprs(uint64[])void": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "log_block_proposers(uint64,uint64)void": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "state": {
        "global": {
            "num_byte_slices": 24,
            "num_uints": 40
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "global_remaining_blocks": {
                    "type": "uint64",
                    "key": "global_remaining_blocks"
                },
                "ix_pb": {
                    "type": "uint64",
                    "key": "ix_pb"
                },
                "manager": {
                    "type": "bytes",
                    "key": "manager"
                },
                "max_duration_days": {
                    "type": "uint64",
                    "key": "max_duration_days"
                },
                "min_duration_blocks": {
                    "type": "uint64",
                    "key": "min_duration_blocks"
                },
                "plat_fee_pb": {
                    "type": "uint64",
                    "key": "plat_fee_pb"
                },
                "txn_fee_pb": {
                    "type": "uint64",
                    "key": "txn_fee_pb"
                },
                "txn_fuel": {
                    "type": "uint64",
                    "key": "txn_fuel"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "DualstakeFarm",
        "methods": [
            {
                "name": "project_apr",
                "args": [
                    {
                        "type": "application",
                        "name": "recipient_app"
                    },
                    {
                        "type": "uint64",
                        "name": "override_farm_amount"
                    }
                ],
                "readonly": true,
                "returns": {
                    "type": "(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)"
                }
            },
            {
                "name": "get_algo_cost",
                "args": [
                    {
                        "type": "application",
                        "name": "recipient_app"
                    },
                    {
                        "type": "asset",
                        "name": "farm_asset"
                    },
                    {
                        "type": "uint64",
                        "name": "duration_blocks"
                    }
                ],
                "readonly": true,
                "returns": {
                    "type": "(uint64,uint64,uint64,uint64,uint64,uint64)"
                }
            },
            {
                "name": "get_algo_cost_and_max_duration",
                "args": [
                    {
                        "type": "application",
                        "name": "recipient_app"
                    },
                    {
                        "type": "asset",
                        "name": "farm_asset"
                    },
                    {
                        "type": "uint64",
                        "name": "duration_blocks"
                    }
                ],
                "readonly": true,
                "returns": {
                    "type": "(uint64,uint64,uint64,uint64,uint64,uint64,uint64)"
                }
            },
            {
                "name": "create_farm",
                "args": [
                    {
                        "type": "application",
                        "name": "recipient_app"
                    },
                    {
                        "type": "asset",
                        "name": "farm_asset"
                    },
                    {
                        "type": "uint64",
                        "name": "amount_per_block"
                    },
                    {
                        "type": "uint64",
                        "name": "duration_blocks"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "extend_duration_blocks",
                "args": [
                    {
                        "type": "application",
                        "name": "recipient_app"
                    },
                    {
                        "type": "uint64",
                        "name": "duration_blocks"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "extend_amount_per_block",
                "args": [
                    {
                        "type": "application",
                        "name": "recipient_app"
                    },
                    {
                        "type": "uint64",
                        "name": "amount_per_block"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "payout",
                "args": [
                    {
                        "type": "application",
                        "name": "recipient_app"
                    },
                    {
                        "type": "uint64",
                        "name": "block_round"
                    },
                    {
                        "type": "bool",
                        "name": "call_swap"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "noop",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "withdraw_fees",
                "args": [
                    {
                        "type": "uint64",
                        "name": "amount"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "optout",
                "args": [
                    {
                        "type": "asset",
                        "name": "asset"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "update_max_duration_days",
                "args": [
                    {
                        "type": "uint64",
                        "name": "max_duration"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "update_min_duration_blocks",
                "args": [
                    {
                        "type": "uint64",
                        "name": "min_duration"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "get_state",
                "args": [
                    {
                        "type": "application",
                        "name": "recipient_app"
                    }
                ],
                "readonly": true,
                "returns": {
                    "type": "(uint64,uint64,uint64,uint64)"
                }
            },
            {
                "name": "log_states",
                "args": [
                    {
                        "type": "uint64[]",
                        "name": "box_names"
                    }
                ],
                "readonly": true,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "get_state_and_apr",
                "args": [
                    {
                        "type": "uint64",
                        "name": "app_id"
                    }
                ],
                "readonly": true,
                "returns": {
                    "type": "(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)"
                }
            },
            {
                "name": "log_states_and_aprs",
                "args": [
                    {
                        "type": "uint64[]",
                        "name": "app_ids"
                    }
                ],
                "readonly": true,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "log_block_proposers",
                "args": [
                    {
                        "type": "uint64",
                        "name": "start_round"
                    },
                    {
                        "type": "uint64",
                        "name": "end_round"
                    }
                ],
                "readonly": true,
                "returns": {
                    "type": "void"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "update_application": "CALL",
        "delete_application": "CALL",
        "no_op": "CREATE"
    }
}