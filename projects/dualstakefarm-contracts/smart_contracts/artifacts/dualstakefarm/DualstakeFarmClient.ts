/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { AlgorandClientInterface } from '@algorandfoundation/algokit-utils/types/algorand-client-interface'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"arcs":[],"name":"DualstakeFarm","structs":{"APRBreakdown":[{"name":"balance","type":"uint64"},{"name":"staked","type":"uint64"},{"name":"currentBlockBonus","type":"uint64"},{"name":"currentAvgBlockPayout","type":"uint64"},{"name":"currentFarmAmount","type":"uint64"},{"name":"currentFarmAmountAlgo","type":"uint64"},{"name":"overrideFarmAmount","type":"uint64"},{"name":"overrideFarmAmountAlgo","type":"uint64"},{"name":"avgRoundTime","type":"uint64"},{"name":"onlineStake","type":"uint64"},{"name":"expectedYearlyBlocks","type":"uint64"},{"name":"baseAprBps","type":"uint64"},{"name":"farmAprBps","type":"uint64"},{"name":"overrideFarmAprBps","type":"uint64"}],"AlgoCost":[{"name":"totalCost","type":"uint64"},{"name":"optinCost","type":"uint64"},{"name":"boxCost","type":"uint64"},{"name":"platformCost","type":"uint64"},{"name":"ixCost","type":"uint64"},{"name":"txnFeeCost","type":"uint64"}],"AlgoCostAndMaxDuration":[{"name":"totalCost","type":"uint64"},{"name":"optinCost","type":"uint64"},{"name":"boxCost","type":"uint64"},{"name":"platformCost","type":"uint64"},{"name":"ixCost","type":"uint64"},{"name":"txnFeeCost","type":"uint64"},{"name":"maxDuration","type":"uint64"}],"FarmState":[{"name":"farmAsset","type":"uint64"},{"name":"amountPerBlock","type":"uint64"},{"name":"remainingDurationBlocks","type":"uint64"},{"name":"lastBlockPaid","type":"uint64"}]},"methods":[{"name":"project_apr","args":[{"name":"recipient_app","type":"application"},{"name":"override_farm_amount","type":"uint64"}],"returns":{"type":"(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)","struct":"APRBreakdown"},"events":[],"readonly":true,"actions":{"create":[],"call":["NoOp"]}},{"name":"get_algo_cost","args":[{"name":"recipient_app","type":"application"},{"name":"farm_asset","type":"asset"},{"name":"duration_blocks","type":"uint64"}],"returns":{"type":"(uint64,uint64,uint64,uint64,uint64,uint64)","struct":"AlgoCost"},"events":[],"readonly":true,"actions":{"create":[],"call":["NoOp"]}},{"name":"get_algo_cost_and_max_duration","args":[{"name":"recipient_app","type":"application"},{"name":"farm_asset","type":"asset"},{"name":"duration_blocks","type":"uint64"}],"returns":{"type":"(uint64,uint64,uint64,uint64,uint64,uint64,uint64)","struct":"AlgoCostAndMaxDuration"},"events":[],"readonly":true,"actions":{"create":[],"call":["NoOp"]}},{"name":"create_farm","args":[{"name":"recipient_app","type":"application"},{"name":"farm_asset","type":"asset"},{"name":"amount_per_block","type":"uint64"},{"name":"duration_blocks","type":"uint64"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"extend_duration_blocks","args":[{"name":"recipient_app","type":"application"},{"name":"duration_blocks","type":"uint64"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"extend_amount_per_block","args":[{"name":"recipient_app","type":"application"},{"name":"amount_per_block","type":"uint64"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"payout","args":[{"name":"recipient_app","type":"application"},{"name":"block_round","type":"uint64"},{"name":"call_swap","type":"bool"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"noop","args":[],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"withdraw_fees","args":[{"name":"amount","type":"uint64"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"optout","args":[{"name":"asset","type":"asset"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"update_max_duration_days","args":[{"name":"max_duration","type":"uint64"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"update_min_duration_blocks","args":[{"name":"min_duration","type":"uint64"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"get_state","args":[{"name":"recipient_app","type":"application"}],"returns":{"type":"(uint64,uint64,uint64,uint64)","struct":"FarmState"},"events":[],"readonly":true,"actions":{"create":[],"call":["NoOp"]}},{"name":"log_states","args":[{"name":"box_names","type":"uint64[]"}],"returns":{"type":"void"},"events":[],"readonly":true,"actions":{"create":[],"call":["NoOp"]}},{"name":"log_block_proposers","args":[{"name":"start_round","type":"uint64"},{"name":"end_round","type":"uint64"}],"returns":{"type":"void"},"events":[],"readonly":true,"actions":{"create":[],"call":["NoOp"]}}],"state":{"schema":{"global":{"ints":40,"bytes":24},"local":{"ints":0,"bytes":0}},"keys":{"global":{"global_remaining_blocks":{"key":"Z2xvYmFsX3JlbWFpbmluZ19ibG9ja3M=","keyType":"AVMString","valueType":"AVMUint64"},"ix_pb":{"key":"aXhfcGI=","keyType":"AVMString","valueType":"AVMUint64"},"manager":{"key":"bWFuYWdlcg==","keyType":"AVMString","valueType":"AVMBytes"},"max_duration_days":{"key":"bWF4X2R1cmF0aW9uX2RheXM=","keyType":"AVMString","valueType":"AVMUint64"},"min_duration_blocks":{"key":"bWluX2R1cmF0aW9uX2Jsb2Nrcw==","keyType":"AVMString","valueType":"AVMUint64"},"plat_fee_pb":{"key":"cGxhdF9mZWVfcGI=","keyType":"AVMString","valueType":"AVMUint64"},"txn_fee_pb":{"key":"dHhuX2ZlZV9wYg==","keyType":"AVMString","valueType":"AVMUint64"},"txn_fuel":{"key":"dHhuX2Z1ZWw=","keyType":"AVMString","valueType":"AVMUint64"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"},"bareActions":{"create":["NoOp"],"call":["DeleteApplication","UpdateApplication"]}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


// Type definitions for ARC-56 structs

export type AprBreakdown = {
  balance: bigint,
  staked: bigint,
  currentBlockBonus: bigint,
  currentAvgBlockPayout: bigint,
  currentFarmAmount: bigint,
  currentFarmAmountAlgo: bigint,
  overrideFarmAmount: bigint,
  overrideFarmAmountAlgo: bigint,
  avgRoundTime: bigint,
  onlineStake: bigint,
  expectedYearlyBlocks: bigint,
  baseAprBps: bigint,
  farmAprBps: bigint,
  overrideFarmAprBps: bigint
}


/**
 * Converts the ABI tuple representation of a APRBreakdown to the struct representation
 */
export function AprBreakdownFromTuple(abiTuple: [bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.APRBreakdown, APP_SPEC.structs) as AprBreakdown
}

export type AlgoCost = {
  totalCost: bigint,
  optinCost: bigint,
  boxCost: bigint,
  platformCost: bigint,
  ixCost: bigint,
  txnFeeCost: bigint
}


/**
 * Converts the ABI tuple representation of a AlgoCost to the struct representation
 */
export function AlgoCostFromTuple(abiTuple: [bigint, bigint, bigint, bigint, bigint, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.AlgoCost, APP_SPEC.structs) as AlgoCost
}

export type AlgoCostAndMaxDuration = {
  totalCost: bigint,
  optinCost: bigint,
  boxCost: bigint,
  platformCost: bigint,
  ixCost: bigint,
  txnFeeCost: bigint,
  maxDuration: bigint
}


/**
 * Converts the ABI tuple representation of a AlgoCostAndMaxDuration to the struct representation
 */
export function AlgoCostAndMaxDurationFromTuple(abiTuple: [bigint, bigint, bigint, bigint, bigint, bigint, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.AlgoCostAndMaxDuration, APP_SPEC.structs) as AlgoCostAndMaxDuration
}

export type FarmState = {
  farmAsset: bigint,
  amountPerBlock: bigint,
  remainingDurationBlocks: bigint,
  lastBlockPaid: bigint
}


/**
 * Converts the ABI tuple representation of a FarmState to the struct representation
 */
export function FarmStateFromTuple(abiTuple: [bigint, bigint, bigint, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.FarmState, APP_SPEC.structs) as FarmState
}

/**
 * The argument types for the DualstakeFarm contract
 */
export type DualstakeFarmArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'project_apr(application,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)': {
      recipientApp: bigint
      overrideFarmAmount: bigint | number
    }
    'get_algo_cost(application,asset,uint64)(uint64,uint64,uint64,uint64,uint64,uint64)': {
      recipientApp: bigint
      farmAsset: bigint
      durationBlocks: bigint | number
    }
    'get_algo_cost_and_max_duration(application,asset,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64)': {
      recipientApp: bigint
      farmAsset: bigint
      durationBlocks: bigint | number
    }
    'create_farm(application,asset,uint64,uint64)void': {
      recipientApp: bigint
      farmAsset: bigint
      amountPerBlock: bigint | number
      durationBlocks: bigint | number
    }
    'extend_duration_blocks(application,uint64)void': {
      recipientApp: bigint
      durationBlocks: bigint | number
    }
    'extend_amount_per_block(application,uint64)void': {
      recipientApp: bigint
      amountPerBlock: bigint | number
    }
    'payout(application,uint64,bool)void': {
      recipientApp: bigint
      blockRound: bigint | number
      callSwap: boolean
    }
    'noop()void': Record<string, never>
    'withdraw_fees(uint64)void': {
      amount: bigint | number
    }
    'optout(asset)void': {
      asset: bigint
    }
    'update_max_duration_days(uint64)void': {
      maxDuration: bigint | number
    }
    'update_min_duration_blocks(uint64)void': {
      minDuration: bigint | number
    }
    'get_state(application)(uint64,uint64,uint64,uint64)': {
      recipientApp: bigint
    }
    'log_states(uint64[])void': {
      boxNames: bigint[] | number[]
    }
    'log_block_proposers(uint64,uint64)void': {
      startRound: bigint | number
      endRound: bigint | number
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'project_apr(application,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)': [recipientApp: bigint, overrideFarmAmount: bigint | number]
    'get_algo_cost(application,asset,uint64)(uint64,uint64,uint64,uint64,uint64,uint64)': [recipientApp: bigint, farmAsset: bigint, durationBlocks: bigint | number]
    'get_algo_cost_and_max_duration(application,asset,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64)': [recipientApp: bigint, farmAsset: bigint, durationBlocks: bigint | number]
    'create_farm(application,asset,uint64,uint64)void': [recipientApp: bigint, farmAsset: bigint, amountPerBlock: bigint | number, durationBlocks: bigint | number]
    'extend_duration_blocks(application,uint64)void': [recipientApp: bigint, durationBlocks: bigint | number]
    'extend_amount_per_block(application,uint64)void': [recipientApp: bigint, amountPerBlock: bigint | number]
    'payout(application,uint64,bool)void': [recipientApp: bigint, blockRound: bigint | number, callSwap: boolean]
    'noop()void': []
    'withdraw_fees(uint64)void': [amount: bigint | number]
    'optout(asset)void': [asset: bigint]
    'update_max_duration_days(uint64)void': [maxDuration: bigint | number]
    'update_min_duration_blocks(uint64)void': [minDuration: bigint | number]
    'get_state(application)(uint64,uint64,uint64,uint64)': [recipientApp: bigint]
    'log_states(uint64[])void': [boxNames: bigint[] | number[]]
    'log_block_proposers(uint64,uint64)void': [startRound: bigint | number, endRound: bigint | number]
  }
}

/**
 * The return type for each method
 */
export type DualstakeFarmReturns = {
  'project_apr(application,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)': AprBreakdown
  'get_algo_cost(application,asset,uint64)(uint64,uint64,uint64,uint64,uint64,uint64)': AlgoCost
  'get_algo_cost_and_max_duration(application,asset,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64)': AlgoCostAndMaxDuration
  'create_farm(application,asset,uint64,uint64)void': void
  'extend_duration_blocks(application,uint64)void': void
  'extend_amount_per_block(application,uint64)void': void
  'payout(application,uint64,bool)void': void
  'noop()void': void
  'withdraw_fees(uint64)void': void
  'optout(asset)void': void
  'update_max_duration_days(uint64)void': void
  'update_min_duration_blocks(uint64)void': void
  'get_state(application)(uint64,uint64,uint64,uint64)': FarmState
  'log_states(uint64[])void': void
  'log_block_proposers(uint64,uint64)void': void
}

/**
 * Defines the types of available calls and state of the DualstakeFarm smart contract.
 */
export type DualstakeFarmTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'project_apr(application,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)' | 'project_apr', {
      argsObj: DualstakeFarmArgs['obj']['project_apr(application,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)']
      argsTuple: DualstakeFarmArgs['tuple']['project_apr(application,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)']
      returns: DualstakeFarmReturns['project_apr(application,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)']
    }>
    & Record<'get_algo_cost(application,asset,uint64)(uint64,uint64,uint64,uint64,uint64,uint64)' | 'get_algo_cost', {
      argsObj: DualstakeFarmArgs['obj']['get_algo_cost(application,asset,uint64)(uint64,uint64,uint64,uint64,uint64,uint64)']
      argsTuple: DualstakeFarmArgs['tuple']['get_algo_cost(application,asset,uint64)(uint64,uint64,uint64,uint64,uint64,uint64)']
      returns: DualstakeFarmReturns['get_algo_cost(application,asset,uint64)(uint64,uint64,uint64,uint64,uint64,uint64)']
    }>
    & Record<'get_algo_cost_and_max_duration(application,asset,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64)' | 'get_algo_cost_and_max_duration', {
      argsObj: DualstakeFarmArgs['obj']['get_algo_cost_and_max_duration(application,asset,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64)']
      argsTuple: DualstakeFarmArgs['tuple']['get_algo_cost_and_max_duration(application,asset,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64)']
      returns: DualstakeFarmReturns['get_algo_cost_and_max_duration(application,asset,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64)']
    }>
    & Record<'create_farm(application,asset,uint64,uint64)void' | 'create_farm', {
      argsObj: DualstakeFarmArgs['obj']['create_farm(application,asset,uint64,uint64)void']
      argsTuple: DualstakeFarmArgs['tuple']['create_farm(application,asset,uint64,uint64)void']
      returns: DualstakeFarmReturns['create_farm(application,asset,uint64,uint64)void']
    }>
    & Record<'extend_duration_blocks(application,uint64)void' | 'extend_duration_blocks', {
      argsObj: DualstakeFarmArgs['obj']['extend_duration_blocks(application,uint64)void']
      argsTuple: DualstakeFarmArgs['tuple']['extend_duration_blocks(application,uint64)void']
      returns: DualstakeFarmReturns['extend_duration_blocks(application,uint64)void']
    }>
    & Record<'extend_amount_per_block(application,uint64)void' | 'extend_amount_per_block', {
      argsObj: DualstakeFarmArgs['obj']['extend_amount_per_block(application,uint64)void']
      argsTuple: DualstakeFarmArgs['tuple']['extend_amount_per_block(application,uint64)void']
      returns: DualstakeFarmReturns['extend_amount_per_block(application,uint64)void']
    }>
    & Record<'payout(application,uint64,bool)void' | 'payout', {
      argsObj: DualstakeFarmArgs['obj']['payout(application,uint64,bool)void']
      argsTuple: DualstakeFarmArgs['tuple']['payout(application,uint64,bool)void']
      returns: DualstakeFarmReturns['payout(application,uint64,bool)void']
    }>
    & Record<'noop()void' | 'noop', {
      argsObj: DualstakeFarmArgs['obj']['noop()void']
      argsTuple: DualstakeFarmArgs['tuple']['noop()void']
      returns: DualstakeFarmReturns['noop()void']
    }>
    & Record<'withdraw_fees(uint64)void' | 'withdraw_fees', {
      argsObj: DualstakeFarmArgs['obj']['withdraw_fees(uint64)void']
      argsTuple: DualstakeFarmArgs['tuple']['withdraw_fees(uint64)void']
      returns: DualstakeFarmReturns['withdraw_fees(uint64)void']
    }>
    & Record<'optout(asset)void' | 'optout', {
      argsObj: DualstakeFarmArgs['obj']['optout(asset)void']
      argsTuple: DualstakeFarmArgs['tuple']['optout(asset)void']
      returns: DualstakeFarmReturns['optout(asset)void']
    }>
    & Record<'update_max_duration_days(uint64)void' | 'update_max_duration_days', {
      argsObj: DualstakeFarmArgs['obj']['update_max_duration_days(uint64)void']
      argsTuple: DualstakeFarmArgs['tuple']['update_max_duration_days(uint64)void']
      returns: DualstakeFarmReturns['update_max_duration_days(uint64)void']
    }>
    & Record<'update_min_duration_blocks(uint64)void' | 'update_min_duration_blocks', {
      argsObj: DualstakeFarmArgs['obj']['update_min_duration_blocks(uint64)void']
      argsTuple: DualstakeFarmArgs['tuple']['update_min_duration_blocks(uint64)void']
      returns: DualstakeFarmReturns['update_min_duration_blocks(uint64)void']
    }>
    & Record<'get_state(application)(uint64,uint64,uint64,uint64)' | 'get_state', {
      argsObj: DualstakeFarmArgs['obj']['get_state(application)(uint64,uint64,uint64,uint64)']
      argsTuple: DualstakeFarmArgs['tuple']['get_state(application)(uint64,uint64,uint64,uint64)']
      returns: DualstakeFarmReturns['get_state(application)(uint64,uint64,uint64,uint64)']
    }>
    & Record<'log_states(uint64[])void' | 'log_states', {
      argsObj: DualstakeFarmArgs['obj']['log_states(uint64[])void']
      argsTuple: DualstakeFarmArgs['tuple']['log_states(uint64[])void']
      returns: DualstakeFarmReturns['log_states(uint64[])void']
    }>
    & Record<'log_block_proposers(uint64,uint64)void' | 'log_block_proposers', {
      argsObj: DualstakeFarmArgs['obj']['log_block_proposers(uint64,uint64)void']
      argsTuple: DualstakeFarmArgs['tuple']['log_block_proposers(uint64,uint64)void']
      returns: DualstakeFarmReturns['log_block_proposers(uint64,uint64)void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        globalRemainingBlocks: bigint
        ixPb: bigint
        manager: BinaryState
        maxDurationDays: bigint
        minDurationBlocks: bigint
        platFeePb: bigint
        txnFeePb: bigint
        txnFuel: bigint
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type DualstakeFarmSignatures = keyof DualstakeFarmTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type DualstakeFarmNonVoidMethodSignatures = keyof DualstakeFarmTypes['methods'] extends infer T ? T extends keyof DualstakeFarmTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the DualstakeFarm smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends DualstakeFarmSignatures> = DualstakeFarmTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the DualstakeFarm smart contract to the method's return type
 */
export type MethodReturn<TSignature extends DualstakeFarmSignatures> = DualstakeFarmTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = DualstakeFarmTypes['state']['global']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type DualstakeFarmCreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines supported update method params for this smart contract
 */
export type DualstakeFarmUpdateCallParams =
  | Expand<AppClientBareCallParams> & {method?: never}
/**
 * Defines supported delete method params for this smart contract
 */
export type DualstakeFarmDeleteCallParams =
  | Expand<AppClientBareCallParams> & {method?: never}
/**
 * Defines arguments required for the deploy method.
 */
export type DualstakeFarmDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: DualstakeFarmCreateCallParams
  /**
   * Update transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  updateParams?: DualstakeFarmUpdateCallParams
  /**
   * Delete transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  deleteParams?: DualstakeFarmDeleteCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the DualstakeFarm smart contract
 */
export abstract class DualstakeFarmParamsFactory {
  /**
   * Constructs a no op call for the project_apr(application,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64) ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static projectApr(params: CallParams<DualstakeFarmArgs['obj']['project_apr(application,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)'] | DualstakeFarmArgs['tuple']['project_apr(application,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'project_apr(application,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.recipientApp, params.args.overrideFarmAmount],
    }
  }
  /**
   * Constructs a no op call for the get_algo_cost(application,asset,uint64)(uint64,uint64,uint64,uint64,uint64,uint64) ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getAlgoCost(params: CallParams<DualstakeFarmArgs['obj']['get_algo_cost(application,asset,uint64)(uint64,uint64,uint64,uint64,uint64,uint64)'] | DualstakeFarmArgs['tuple']['get_algo_cost(application,asset,uint64)(uint64,uint64,uint64,uint64,uint64,uint64)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_algo_cost(application,asset,uint64)(uint64,uint64,uint64,uint64,uint64,uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.recipientApp, params.args.farmAsset, params.args.durationBlocks],
    }
  }
  /**
   * Constructs a no op call for the get_algo_cost_and_max_duration(application,asset,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64) ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getAlgoCostAndMaxDuration(params: CallParams<DualstakeFarmArgs['obj']['get_algo_cost_and_max_duration(application,asset,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64)'] | DualstakeFarmArgs['tuple']['get_algo_cost_and_max_duration(application,asset,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_algo_cost_and_max_duration(application,asset,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.recipientApp, params.args.farmAsset, params.args.durationBlocks],
    }
  }
  /**
   * Constructs a no op call for the create_farm(application,asset,uint64,uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static createFarm(params: CallParams<DualstakeFarmArgs['obj']['create_farm(application,asset,uint64,uint64)void'] | DualstakeFarmArgs['tuple']['create_farm(application,asset,uint64,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'create_farm(application,asset,uint64,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.recipientApp, params.args.farmAsset, params.args.amountPerBlock, params.args.durationBlocks],
    }
  }
  /**
   * Constructs a no op call for the extend_duration_blocks(application,uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static extendDurationBlocks(params: CallParams<DualstakeFarmArgs['obj']['extend_duration_blocks(application,uint64)void'] | DualstakeFarmArgs['tuple']['extend_duration_blocks(application,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'extend_duration_blocks(application,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.recipientApp, params.args.durationBlocks],
    }
  }
  /**
   * Constructs a no op call for the extend_amount_per_block(application,uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static extendAmountPerBlock(params: CallParams<DualstakeFarmArgs['obj']['extend_amount_per_block(application,uint64)void'] | DualstakeFarmArgs['tuple']['extend_amount_per_block(application,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'extend_amount_per_block(application,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.recipientApp, params.args.amountPerBlock],
    }
  }
  /**
   * Constructs a no op call for the payout(application,uint64,bool)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static payout(params: CallParams<DualstakeFarmArgs['obj']['payout(application,uint64,bool)void'] | DualstakeFarmArgs['tuple']['payout(application,uint64,bool)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'payout(application,uint64,bool)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.recipientApp, params.args.blockRound, params.args.callSwap],
    }
  }
  /**
   * Constructs a no op call for the noop()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static noop(params: CallParams<DualstakeFarmArgs['obj']['noop()void'] | DualstakeFarmArgs['tuple']['noop()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'noop()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the withdraw_fees(uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static withdrawFees(params: CallParams<DualstakeFarmArgs['obj']['withdraw_fees(uint64)void'] | DualstakeFarmArgs['tuple']['withdraw_fees(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'withdraw_fees(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.amount],
    }
  }
  /**
   * Constructs a no op call for the optout(asset)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static optout(params: CallParams<DualstakeFarmArgs['obj']['optout(asset)void'] | DualstakeFarmArgs['tuple']['optout(asset)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'optout(asset)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.asset],
    }
  }
  /**
   * Constructs a no op call for the update_max_duration_days(uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static updateMaxDurationDays(params: CallParams<DualstakeFarmArgs['obj']['update_max_duration_days(uint64)void'] | DualstakeFarmArgs['tuple']['update_max_duration_days(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'update_max_duration_days(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.maxDuration],
    }
  }
  /**
   * Constructs a no op call for the update_min_duration_blocks(uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static updateMinDurationBlocks(params: CallParams<DualstakeFarmArgs['obj']['update_min_duration_blocks(uint64)void'] | DualstakeFarmArgs['tuple']['update_min_duration_blocks(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'update_min_duration_blocks(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.minDuration],
    }
  }
  /**
   * Constructs a no op call for the get_state(application)(uint64,uint64,uint64,uint64) ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getState(params: CallParams<DualstakeFarmArgs['obj']['get_state(application)(uint64,uint64,uint64,uint64)'] | DualstakeFarmArgs['tuple']['get_state(application)(uint64,uint64,uint64,uint64)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_state(application)(uint64,uint64,uint64,uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.recipientApp],
    }
  }
  /**
   * Constructs a no op call for the log_states(uint64[])void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static logStates(params: CallParams<DualstakeFarmArgs['obj']['log_states(uint64[])void'] | DualstakeFarmArgs['tuple']['log_states(uint64[])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'log_states(uint64[])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.boxNames],
    }
  }
  /**
   * Constructs a no op call for the log_block_proposers(uint64,uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static logBlockProposers(params: CallParams<DualstakeFarmArgs['obj']['log_block_proposers(uint64,uint64)void'] | DualstakeFarmArgs['tuple']['log_block_proposers(uint64,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'log_block_proposers(uint64,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.startRound, params.args.endRound],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the DualstakeFarm smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class DualstakeFarmFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `DualstakeFarmFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new DualstakeFarmClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new DualstakeFarmClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the DualstakeFarm smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: DualstakeFarmDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
    })
    return { result: result.result, appClient: new DualstakeFarmClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the DualstakeFarm smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
    },

    /**
     * Gets available deployUpdate methods
     */
    deployUpdate: {
      /**
       * Updates an existing instance of the DualstakeFarm smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a deployUpdate call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams>) => {
        return this.appFactory.params.bare.deployUpdate(params)
      },
    },

    /**
     * Gets available deployDelete methods
     */
    deployDelete: {
      /**
       * Deletes an existing instance of the DualstakeFarm smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a deployDelete call
       */
      bare: (params?: Expand<AppClientBareCallParams>) => {
        return this.appFactory.params.bare.deployDelete(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the DualstakeFarm smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the DualstakeFarm smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new DualstakeFarmClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the DualstakeFarm smart contract
 */
export class DualstakeFarmClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `DualstakeFarmClient`
   *
   * @param appClient An `AppClient` instance which has been created with the DualstakeFarm app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `DualstakeFarmClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends DualstakeFarmNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `DualstakeFarmClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<DualstakeFarmClient> {
    return new DualstakeFarmClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `DualstakeFarmClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<DualstakeFarmClient> {
    return new DualstakeFarmClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available update methods
     */
    update: {
      /**
       * Updates an existing instance of the DualstakeFarm smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The update result
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams>) => {
        return this.appClient.params.bare.update(params)
      },
    },

    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the DualstakeFarm smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The delete result
       */
      bare: (params?: Expand<AppClientBareCallParams>) => {
        return this.appClient.params.bare.delete(params)
      },
    },

    /**
     * Makes a clear_state call to an existing instance of the DualstakeFarm smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the DualstakeFarm smart contract using the `project_apr(application,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    projectApr: (params: CallParams<DualstakeFarmArgs['obj']['project_apr(application,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)'] | DualstakeFarmArgs['tuple']['project_apr(application,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(DualstakeFarmParamsFactory.projectApr(params))
    },

    /**
     * Makes a call to the DualstakeFarm smart contract using the `get_algo_cost(application,asset,uint64)(uint64,uint64,uint64,uint64,uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getAlgoCost: (params: CallParams<DualstakeFarmArgs['obj']['get_algo_cost(application,asset,uint64)(uint64,uint64,uint64,uint64,uint64,uint64)'] | DualstakeFarmArgs['tuple']['get_algo_cost(application,asset,uint64)(uint64,uint64,uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(DualstakeFarmParamsFactory.getAlgoCost(params))
    },

    /**
     * Makes a call to the DualstakeFarm smart contract using the `get_algo_cost_and_max_duration(application,asset,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getAlgoCostAndMaxDuration: (params: CallParams<DualstakeFarmArgs['obj']['get_algo_cost_and_max_duration(application,asset,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64)'] | DualstakeFarmArgs['tuple']['get_algo_cost_and_max_duration(application,asset,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(DualstakeFarmParamsFactory.getAlgoCostAndMaxDuration(params))
    },

    /**
     * Makes a call to the DualstakeFarm smart contract using the `create_farm(application,asset,uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    createFarm: (params: CallParams<DualstakeFarmArgs['obj']['create_farm(application,asset,uint64,uint64)void'] | DualstakeFarmArgs['tuple']['create_farm(application,asset,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(DualstakeFarmParamsFactory.createFarm(params))
    },

    /**
     * Makes a call to the DualstakeFarm smart contract using the `extend_duration_blocks(application,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    extendDurationBlocks: (params: CallParams<DualstakeFarmArgs['obj']['extend_duration_blocks(application,uint64)void'] | DualstakeFarmArgs['tuple']['extend_duration_blocks(application,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(DualstakeFarmParamsFactory.extendDurationBlocks(params))
    },

    /**
     * Makes a call to the DualstakeFarm smart contract using the `extend_amount_per_block(application,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    extendAmountPerBlock: (params: CallParams<DualstakeFarmArgs['obj']['extend_amount_per_block(application,uint64)void'] | DualstakeFarmArgs['tuple']['extend_amount_per_block(application,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(DualstakeFarmParamsFactory.extendAmountPerBlock(params))
    },

    /**
     * Makes a call to the DualstakeFarm smart contract using the `payout(application,uint64,bool)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    payout: (params: CallParams<DualstakeFarmArgs['obj']['payout(application,uint64,bool)void'] | DualstakeFarmArgs['tuple']['payout(application,uint64,bool)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(DualstakeFarmParamsFactory.payout(params))
    },

    /**
     * Makes a call to the DualstakeFarm smart contract using the `noop()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    noop: (params: CallParams<DualstakeFarmArgs['obj']['noop()void'] | DualstakeFarmArgs['tuple']['noop()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(DualstakeFarmParamsFactory.noop(params))
    },

    /**
     * Makes a call to the DualstakeFarm smart contract using the `withdraw_fees(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    withdrawFees: (params: CallParams<DualstakeFarmArgs['obj']['withdraw_fees(uint64)void'] | DualstakeFarmArgs['tuple']['withdraw_fees(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(DualstakeFarmParamsFactory.withdrawFees(params))
    },

    /**
     * Makes a call to the DualstakeFarm smart contract using the `optout(asset)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    optout: (params: CallParams<DualstakeFarmArgs['obj']['optout(asset)void'] | DualstakeFarmArgs['tuple']['optout(asset)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(DualstakeFarmParamsFactory.optout(params))
    },

    /**
     * Makes a call to the DualstakeFarm smart contract using the `update_max_duration_days(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    updateMaxDurationDays: (params: CallParams<DualstakeFarmArgs['obj']['update_max_duration_days(uint64)void'] | DualstakeFarmArgs['tuple']['update_max_duration_days(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(DualstakeFarmParamsFactory.updateMaxDurationDays(params))
    },

    /**
     * Makes a call to the DualstakeFarm smart contract using the `update_min_duration_blocks(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    updateMinDurationBlocks: (params: CallParams<DualstakeFarmArgs['obj']['update_min_duration_blocks(uint64)void'] | DualstakeFarmArgs['tuple']['update_min_duration_blocks(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(DualstakeFarmParamsFactory.updateMinDurationBlocks(params))
    },

    /**
     * Makes a call to the DualstakeFarm smart contract using the `get_state(application)(uint64,uint64,uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getState: (params: CallParams<DualstakeFarmArgs['obj']['get_state(application)(uint64,uint64,uint64,uint64)'] | DualstakeFarmArgs['tuple']['get_state(application)(uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(DualstakeFarmParamsFactory.getState(params))
    },

    /**
     * Makes a call to the DualstakeFarm smart contract using the `log_states(uint64[])void` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    logStates: (params: CallParams<DualstakeFarmArgs['obj']['log_states(uint64[])void'] | DualstakeFarmArgs['tuple']['log_states(uint64[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(DualstakeFarmParamsFactory.logStates(params))
    },

    /**
     * Makes a call to the DualstakeFarm smart contract using the `log_block_proposers(uint64,uint64)void` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    logBlockProposers: (params: CallParams<DualstakeFarmArgs['obj']['log_block_proposers(uint64,uint64)void'] | DualstakeFarmArgs['tuple']['log_block_proposers(uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(DualstakeFarmParamsFactory.logBlockProposers(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available update methods
     */
    update: {
      /**
       * Updates an existing instance of the DualstakeFarm smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The update result
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams>) => {
        return this.appClient.createTransaction.bare.update(params)
      },
    },

    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the DualstakeFarm smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The delete result
       */
      bare: (params?: Expand<AppClientBareCallParams>) => {
        return this.appClient.createTransaction.bare.delete(params)
      },
    },

    /**
     * Makes a clear_state call to an existing instance of the DualstakeFarm smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the DualstakeFarm smart contract using the `project_apr(application,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    projectApr: (params: CallParams<DualstakeFarmArgs['obj']['project_apr(application,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)'] | DualstakeFarmArgs['tuple']['project_apr(application,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(DualstakeFarmParamsFactory.projectApr(params))
    },

    /**
     * Makes a call to the DualstakeFarm smart contract using the `get_algo_cost(application,asset,uint64)(uint64,uint64,uint64,uint64,uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getAlgoCost: (params: CallParams<DualstakeFarmArgs['obj']['get_algo_cost(application,asset,uint64)(uint64,uint64,uint64,uint64,uint64,uint64)'] | DualstakeFarmArgs['tuple']['get_algo_cost(application,asset,uint64)(uint64,uint64,uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(DualstakeFarmParamsFactory.getAlgoCost(params))
    },

    /**
     * Makes a call to the DualstakeFarm smart contract using the `get_algo_cost_and_max_duration(application,asset,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getAlgoCostAndMaxDuration: (params: CallParams<DualstakeFarmArgs['obj']['get_algo_cost_and_max_duration(application,asset,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64)'] | DualstakeFarmArgs['tuple']['get_algo_cost_and_max_duration(application,asset,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(DualstakeFarmParamsFactory.getAlgoCostAndMaxDuration(params))
    },

    /**
     * Makes a call to the DualstakeFarm smart contract using the `create_farm(application,asset,uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    createFarm: (params: CallParams<DualstakeFarmArgs['obj']['create_farm(application,asset,uint64,uint64)void'] | DualstakeFarmArgs['tuple']['create_farm(application,asset,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(DualstakeFarmParamsFactory.createFarm(params))
    },

    /**
     * Makes a call to the DualstakeFarm smart contract using the `extend_duration_blocks(application,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    extendDurationBlocks: (params: CallParams<DualstakeFarmArgs['obj']['extend_duration_blocks(application,uint64)void'] | DualstakeFarmArgs['tuple']['extend_duration_blocks(application,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(DualstakeFarmParamsFactory.extendDurationBlocks(params))
    },

    /**
     * Makes a call to the DualstakeFarm smart contract using the `extend_amount_per_block(application,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    extendAmountPerBlock: (params: CallParams<DualstakeFarmArgs['obj']['extend_amount_per_block(application,uint64)void'] | DualstakeFarmArgs['tuple']['extend_amount_per_block(application,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(DualstakeFarmParamsFactory.extendAmountPerBlock(params))
    },

    /**
     * Makes a call to the DualstakeFarm smart contract using the `payout(application,uint64,bool)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    payout: (params: CallParams<DualstakeFarmArgs['obj']['payout(application,uint64,bool)void'] | DualstakeFarmArgs['tuple']['payout(application,uint64,bool)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(DualstakeFarmParamsFactory.payout(params))
    },

    /**
     * Makes a call to the DualstakeFarm smart contract using the `noop()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    noop: (params: CallParams<DualstakeFarmArgs['obj']['noop()void'] | DualstakeFarmArgs['tuple']['noop()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(DualstakeFarmParamsFactory.noop(params))
    },

    /**
     * Makes a call to the DualstakeFarm smart contract using the `withdraw_fees(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    withdrawFees: (params: CallParams<DualstakeFarmArgs['obj']['withdraw_fees(uint64)void'] | DualstakeFarmArgs['tuple']['withdraw_fees(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(DualstakeFarmParamsFactory.withdrawFees(params))
    },

    /**
     * Makes a call to the DualstakeFarm smart contract using the `optout(asset)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    optout: (params: CallParams<DualstakeFarmArgs['obj']['optout(asset)void'] | DualstakeFarmArgs['tuple']['optout(asset)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(DualstakeFarmParamsFactory.optout(params))
    },

    /**
     * Makes a call to the DualstakeFarm smart contract using the `update_max_duration_days(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    updateMaxDurationDays: (params: CallParams<DualstakeFarmArgs['obj']['update_max_duration_days(uint64)void'] | DualstakeFarmArgs['tuple']['update_max_duration_days(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(DualstakeFarmParamsFactory.updateMaxDurationDays(params))
    },

    /**
     * Makes a call to the DualstakeFarm smart contract using the `update_min_duration_blocks(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    updateMinDurationBlocks: (params: CallParams<DualstakeFarmArgs['obj']['update_min_duration_blocks(uint64)void'] | DualstakeFarmArgs['tuple']['update_min_duration_blocks(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(DualstakeFarmParamsFactory.updateMinDurationBlocks(params))
    },

    /**
     * Makes a call to the DualstakeFarm smart contract using the `get_state(application)(uint64,uint64,uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getState: (params: CallParams<DualstakeFarmArgs['obj']['get_state(application)(uint64,uint64,uint64,uint64)'] | DualstakeFarmArgs['tuple']['get_state(application)(uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(DualstakeFarmParamsFactory.getState(params))
    },

    /**
     * Makes a call to the DualstakeFarm smart contract using the `log_states(uint64[])void` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    logStates: (params: CallParams<DualstakeFarmArgs['obj']['log_states(uint64[])void'] | DualstakeFarmArgs['tuple']['log_states(uint64[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(DualstakeFarmParamsFactory.logStates(params))
    },

    /**
     * Makes a call to the DualstakeFarm smart contract using the `log_block_proposers(uint64,uint64)void` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    logBlockProposers: (params: CallParams<DualstakeFarmArgs['obj']['log_block_proposers(uint64,uint64)void'] | DualstakeFarmArgs['tuple']['log_block_proposers(uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(DualstakeFarmParamsFactory.logBlockProposers(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available update methods
     */
    update: {
      /**
       * Updates an existing instance of the DualstakeFarm smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The update result
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & SendParams>) => {
        return this.appClient.send.bare.update(params)
      },
    },

    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the DualstakeFarm smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The delete result
       */
      bare: (params?: Expand<AppClientBareCallParams & SendParams>) => {
        return this.appClient.send.bare.delete(params)
      },
    },

    /**
     * Makes a clear_state call to an existing instance of the DualstakeFarm smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the DualstakeFarm smart contract using the `project_apr(application,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    projectApr: async (params: CallParams<DualstakeFarmArgs['obj']['project_apr(application,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)'] | DualstakeFarmArgs['tuple']['project_apr(application,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(DualstakeFarmParamsFactory.projectApr(params))
      return {...result, return: result.return as unknown as (undefined | DualstakeFarmReturns['project_apr(application,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)'])}
    },

    /**
     * Makes a call to the DualstakeFarm smart contract using the `get_algo_cost(application,asset,uint64)(uint64,uint64,uint64,uint64,uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getAlgoCost: async (params: CallParams<DualstakeFarmArgs['obj']['get_algo_cost(application,asset,uint64)(uint64,uint64,uint64,uint64,uint64,uint64)'] | DualstakeFarmArgs['tuple']['get_algo_cost(application,asset,uint64)(uint64,uint64,uint64,uint64,uint64,uint64)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(DualstakeFarmParamsFactory.getAlgoCost(params))
      return {...result, return: result.return as unknown as (undefined | DualstakeFarmReturns['get_algo_cost(application,asset,uint64)(uint64,uint64,uint64,uint64,uint64,uint64)'])}
    },

    /**
     * Makes a call to the DualstakeFarm smart contract using the `get_algo_cost_and_max_duration(application,asset,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getAlgoCostAndMaxDuration: async (params: CallParams<DualstakeFarmArgs['obj']['get_algo_cost_and_max_duration(application,asset,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64)'] | DualstakeFarmArgs['tuple']['get_algo_cost_and_max_duration(application,asset,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(DualstakeFarmParamsFactory.getAlgoCostAndMaxDuration(params))
      return {...result, return: result.return as unknown as (undefined | DualstakeFarmReturns['get_algo_cost_and_max_duration(application,asset,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64)'])}
    },

    /**
     * Makes a call to the DualstakeFarm smart contract using the `create_farm(application,asset,uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    createFarm: async (params: CallParams<DualstakeFarmArgs['obj']['create_farm(application,asset,uint64,uint64)void'] | DualstakeFarmArgs['tuple']['create_farm(application,asset,uint64,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(DualstakeFarmParamsFactory.createFarm(params))
      return {...result, return: result.return as unknown as (undefined | DualstakeFarmReturns['create_farm(application,asset,uint64,uint64)void'])}
    },

    /**
     * Makes a call to the DualstakeFarm smart contract using the `extend_duration_blocks(application,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    extendDurationBlocks: async (params: CallParams<DualstakeFarmArgs['obj']['extend_duration_blocks(application,uint64)void'] | DualstakeFarmArgs['tuple']['extend_duration_blocks(application,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(DualstakeFarmParamsFactory.extendDurationBlocks(params))
      return {...result, return: result.return as unknown as (undefined | DualstakeFarmReturns['extend_duration_blocks(application,uint64)void'])}
    },

    /**
     * Makes a call to the DualstakeFarm smart contract using the `extend_amount_per_block(application,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    extendAmountPerBlock: async (params: CallParams<DualstakeFarmArgs['obj']['extend_amount_per_block(application,uint64)void'] | DualstakeFarmArgs['tuple']['extend_amount_per_block(application,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(DualstakeFarmParamsFactory.extendAmountPerBlock(params))
      return {...result, return: result.return as unknown as (undefined | DualstakeFarmReturns['extend_amount_per_block(application,uint64)void'])}
    },

    /**
     * Makes a call to the DualstakeFarm smart contract using the `payout(application,uint64,bool)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    payout: async (params: CallParams<DualstakeFarmArgs['obj']['payout(application,uint64,bool)void'] | DualstakeFarmArgs['tuple']['payout(application,uint64,bool)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(DualstakeFarmParamsFactory.payout(params))
      return {...result, return: result.return as unknown as (undefined | DualstakeFarmReturns['payout(application,uint64,bool)void'])}
    },

    /**
     * Makes a call to the DualstakeFarm smart contract using the `noop()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    noop: async (params: CallParams<DualstakeFarmArgs['obj']['noop()void'] | DualstakeFarmArgs['tuple']['noop()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(DualstakeFarmParamsFactory.noop(params))
      return {...result, return: result.return as unknown as (undefined | DualstakeFarmReturns['noop()void'])}
    },

    /**
     * Makes a call to the DualstakeFarm smart contract using the `withdraw_fees(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    withdrawFees: async (params: CallParams<DualstakeFarmArgs['obj']['withdraw_fees(uint64)void'] | DualstakeFarmArgs['tuple']['withdraw_fees(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(DualstakeFarmParamsFactory.withdrawFees(params))
      return {...result, return: result.return as unknown as (undefined | DualstakeFarmReturns['withdraw_fees(uint64)void'])}
    },

    /**
     * Makes a call to the DualstakeFarm smart contract using the `optout(asset)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    optout: async (params: CallParams<DualstakeFarmArgs['obj']['optout(asset)void'] | DualstakeFarmArgs['tuple']['optout(asset)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(DualstakeFarmParamsFactory.optout(params))
      return {...result, return: result.return as unknown as (undefined | DualstakeFarmReturns['optout(asset)void'])}
    },

    /**
     * Makes a call to the DualstakeFarm smart contract using the `update_max_duration_days(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    updateMaxDurationDays: async (params: CallParams<DualstakeFarmArgs['obj']['update_max_duration_days(uint64)void'] | DualstakeFarmArgs['tuple']['update_max_duration_days(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(DualstakeFarmParamsFactory.updateMaxDurationDays(params))
      return {...result, return: result.return as unknown as (undefined | DualstakeFarmReturns['update_max_duration_days(uint64)void'])}
    },

    /**
     * Makes a call to the DualstakeFarm smart contract using the `update_min_duration_blocks(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    updateMinDurationBlocks: async (params: CallParams<DualstakeFarmArgs['obj']['update_min_duration_blocks(uint64)void'] | DualstakeFarmArgs['tuple']['update_min_duration_blocks(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(DualstakeFarmParamsFactory.updateMinDurationBlocks(params))
      return {...result, return: result.return as unknown as (undefined | DualstakeFarmReturns['update_min_duration_blocks(uint64)void'])}
    },

    /**
     * Makes a call to the DualstakeFarm smart contract using the `get_state(application)(uint64,uint64,uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getState: async (params: CallParams<DualstakeFarmArgs['obj']['get_state(application)(uint64,uint64,uint64,uint64)'] | DualstakeFarmArgs['tuple']['get_state(application)(uint64,uint64,uint64,uint64)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(DualstakeFarmParamsFactory.getState(params))
      return {...result, return: result.return as unknown as (undefined | DualstakeFarmReturns['get_state(application)(uint64,uint64,uint64,uint64)'])}
    },

    /**
     * Makes a call to the DualstakeFarm smart contract using the `log_states(uint64[])void` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    logStates: async (params: CallParams<DualstakeFarmArgs['obj']['log_states(uint64[])void'] | DualstakeFarmArgs['tuple']['log_states(uint64[])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(DualstakeFarmParamsFactory.logStates(params))
      return {...result, return: result.return as unknown as (undefined | DualstakeFarmReturns['log_states(uint64[])void'])}
    },

    /**
     * Makes a call to the DualstakeFarm smart contract using the `log_block_proposers(uint64,uint64)void` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    logBlockProposers: async (params: CallParams<DualstakeFarmArgs['obj']['log_block_proposers(uint64,uint64)void'] | DualstakeFarmArgs['tuple']['log_block_proposers(uint64,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(DualstakeFarmParamsFactory.logBlockProposers(params))
      return {...result, return: result.return as unknown as (undefined | DualstakeFarmReturns['log_block_proposers(uint64,uint64)void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new DualstakeFarmClient(this.appClient.clone(params))
  }

  /**
   * Makes a readonly (simulated) call to the DualstakeFarm smart contract using the `project_apr(application,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async projectApr(params: CallParams<DualstakeFarmArgs['obj']['project_apr(application,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)'] | DualstakeFarmArgs['tuple']['project_apr(application,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)']>) {
    const result = await this.appClient.send.call(DualstakeFarmParamsFactory.projectApr(params))
    return result.return as unknown as DualstakeFarmReturns['project_apr(application,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)']
  }

  /**
   * Makes a readonly (simulated) call to the DualstakeFarm smart contract using the `get_algo_cost(application,asset,uint64)(uint64,uint64,uint64,uint64,uint64,uint64)` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getAlgoCost(params: CallParams<DualstakeFarmArgs['obj']['get_algo_cost(application,asset,uint64)(uint64,uint64,uint64,uint64,uint64,uint64)'] | DualstakeFarmArgs['tuple']['get_algo_cost(application,asset,uint64)(uint64,uint64,uint64,uint64,uint64,uint64)']>) {
    const result = await this.appClient.send.call(DualstakeFarmParamsFactory.getAlgoCost(params))
    return result.return as unknown as DualstakeFarmReturns['get_algo_cost(application,asset,uint64)(uint64,uint64,uint64,uint64,uint64,uint64)']
  }

  /**
   * Makes a readonly (simulated) call to the DualstakeFarm smart contract using the `get_algo_cost_and_max_duration(application,asset,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64)` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getAlgoCostAndMaxDuration(params: CallParams<DualstakeFarmArgs['obj']['get_algo_cost_and_max_duration(application,asset,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64)'] | DualstakeFarmArgs['tuple']['get_algo_cost_and_max_duration(application,asset,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64)']>) {
    const result = await this.appClient.send.call(DualstakeFarmParamsFactory.getAlgoCostAndMaxDuration(params))
    return result.return as unknown as DualstakeFarmReturns['get_algo_cost_and_max_duration(application,asset,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64)']
  }

  /**
   * Makes a readonly (simulated) call to the DualstakeFarm smart contract using the `get_state(application)(uint64,uint64,uint64,uint64)` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getState(params: CallParams<DualstakeFarmArgs['obj']['get_state(application)(uint64,uint64,uint64,uint64)'] | DualstakeFarmArgs['tuple']['get_state(application)(uint64,uint64,uint64,uint64)']>) {
    const result = await this.appClient.send.call(DualstakeFarmParamsFactory.getState(params))
    return result.return as unknown as DualstakeFarmReturns['get_state(application)(uint64,uint64,uint64,uint64)']
  }

  /**
   * Makes a readonly (simulated) call to the DualstakeFarm smart contract using the `log_states(uint64[])void` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async logStates(params: CallParams<DualstakeFarmArgs['obj']['log_states(uint64[])void'] | DualstakeFarmArgs['tuple']['log_states(uint64[])void']>) {
    const result = await this.appClient.send.call(DualstakeFarmParamsFactory.logStates(params))
    return result.return as unknown as DualstakeFarmReturns['log_states(uint64[])void']
  }

  /**
   * Makes a readonly (simulated) call to the DualstakeFarm smart contract using the `log_block_proposers(uint64,uint64)void` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async logBlockProposers(params: CallParams<DualstakeFarmArgs['obj']['log_block_proposers(uint64,uint64)void'] | DualstakeFarmArgs['tuple']['log_block_proposers(uint64,uint64)void']>) {
    const result = await this.appClient.send.call(DualstakeFarmParamsFactory.logBlockProposers(params))
    return result.return as unknown as DualstakeFarmReturns['log_block_proposers(uint64,uint64)void']
  }

  /**
   * Methods to access state for the current DualstakeFarm app
   */
  state = {
    /**
     * Methods to access global state for the current DualstakeFarm app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          globalRemainingBlocks: result.global_remaining_blocks,
          ixPb: result.ix_pb,
          manager: new BinaryStateValue(result.manager),
          maxDurationDays: result.max_duration_days,
          minDurationBlocks: result.min_duration_blocks,
          platFeePb: result.plat_fee_pb,
          txnFeePb: result.txn_fee_pb,
          txnFuel: result.txn_fuel,
        }
      },
      /**
       * Get the current value of the global_remaining_blocks key in global state
       */
      globalRemainingBlocks: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("globalRemainingBlocks")) as bigint | undefined },
      /**
       * Get the current value of the ix_pb key in global state
       */
      ixPb: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("ixPb")) as bigint | undefined },
      /**
       * Get the current value of the manager key in global state
       */
      manager: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("manager")) as Uint8Array | undefined) },
      /**
       * Get the current value of the max_duration_days key in global state
       */
      maxDurationDays: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("maxDurationDays")) as bigint | undefined },
      /**
       * Get the current value of the min_duration_blocks key in global state
       */
      minDurationBlocks: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("minDurationBlocks")) as bigint | undefined },
      /**
       * Get the current value of the plat_fee_pb key in global state
       */
      platFeePb: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("platFeePb")) as bigint | undefined },
      /**
       * Get the current value of the txn_fee_pb key in global state
       */
      txnFeePb: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("txnFeePb")) as bigint | undefined },
      /**
       * Get the current value of the txn_fuel key in global state
       */
      txnFuel: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("txnFuel")) as bigint | undefined },
    },
  }

  public newGroup(): DualstakeFarmComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a project_apr(application,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64) method call against the DualstakeFarm contract
       */
      projectApr(params: CallParams<DualstakeFarmArgs['obj']['project_apr(application,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)'] | DualstakeFarmArgs['tuple']['project_apr(application,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.projectApr(params)))
        resultMappers.push((v) => client.decodeReturnValue('project_apr(application,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)', v))
        return this
      },
      /**
       * Add a get_algo_cost(application,asset,uint64)(uint64,uint64,uint64,uint64,uint64,uint64) method call against the DualstakeFarm contract
       */
      getAlgoCost(params: CallParams<DualstakeFarmArgs['obj']['get_algo_cost(application,asset,uint64)(uint64,uint64,uint64,uint64,uint64,uint64)'] | DualstakeFarmArgs['tuple']['get_algo_cost(application,asset,uint64)(uint64,uint64,uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getAlgoCost(params)))
        resultMappers.push((v) => client.decodeReturnValue('get_algo_cost(application,asset,uint64)(uint64,uint64,uint64,uint64,uint64,uint64)', v))
        return this
      },
      /**
       * Add a get_algo_cost_and_max_duration(application,asset,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64) method call against the DualstakeFarm contract
       */
      getAlgoCostAndMaxDuration(params: CallParams<DualstakeFarmArgs['obj']['get_algo_cost_and_max_duration(application,asset,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64)'] | DualstakeFarmArgs['tuple']['get_algo_cost_and_max_duration(application,asset,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getAlgoCostAndMaxDuration(params)))
        resultMappers.push((v) => client.decodeReturnValue('get_algo_cost_and_max_duration(application,asset,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64)', v))
        return this
      },
      /**
       * Add a create_farm(application,asset,uint64,uint64)void method call against the DualstakeFarm contract
       */
      createFarm(params: CallParams<DualstakeFarmArgs['obj']['create_farm(application,asset,uint64,uint64)void'] | DualstakeFarmArgs['tuple']['create_farm(application,asset,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.createFarm(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a extend_duration_blocks(application,uint64)void method call against the DualstakeFarm contract
       */
      extendDurationBlocks(params: CallParams<DualstakeFarmArgs['obj']['extend_duration_blocks(application,uint64)void'] | DualstakeFarmArgs['tuple']['extend_duration_blocks(application,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.extendDurationBlocks(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a extend_amount_per_block(application,uint64)void method call against the DualstakeFarm contract
       */
      extendAmountPerBlock(params: CallParams<DualstakeFarmArgs['obj']['extend_amount_per_block(application,uint64)void'] | DualstakeFarmArgs['tuple']['extend_amount_per_block(application,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.extendAmountPerBlock(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a payout(application,uint64,bool)void method call against the DualstakeFarm contract
       */
      payout(params: CallParams<DualstakeFarmArgs['obj']['payout(application,uint64,bool)void'] | DualstakeFarmArgs['tuple']['payout(application,uint64,bool)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.payout(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a noop()void method call against the DualstakeFarm contract
       */
      noop(params: CallParams<DualstakeFarmArgs['obj']['noop()void'] | DualstakeFarmArgs['tuple']['noop()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.noop(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a withdraw_fees(uint64)void method call against the DualstakeFarm contract
       */
      withdrawFees(params: CallParams<DualstakeFarmArgs['obj']['withdraw_fees(uint64)void'] | DualstakeFarmArgs['tuple']['withdraw_fees(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.withdrawFees(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a optout(asset)void method call against the DualstakeFarm contract
       */
      optout(params: CallParams<DualstakeFarmArgs['obj']['optout(asset)void'] | DualstakeFarmArgs['tuple']['optout(asset)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.optout(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a update_max_duration_days(uint64)void method call against the DualstakeFarm contract
       */
      updateMaxDurationDays(params: CallParams<DualstakeFarmArgs['obj']['update_max_duration_days(uint64)void'] | DualstakeFarmArgs['tuple']['update_max_duration_days(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.updateMaxDurationDays(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a update_min_duration_blocks(uint64)void method call against the DualstakeFarm contract
       */
      updateMinDurationBlocks(params: CallParams<DualstakeFarmArgs['obj']['update_min_duration_blocks(uint64)void'] | DualstakeFarmArgs['tuple']['update_min_duration_blocks(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.updateMinDurationBlocks(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a get_state(application)(uint64,uint64,uint64,uint64) method call against the DualstakeFarm contract
       */
      getState(params: CallParams<DualstakeFarmArgs['obj']['get_state(application)(uint64,uint64,uint64,uint64)'] | DualstakeFarmArgs['tuple']['get_state(application)(uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getState(params)))
        resultMappers.push((v) => client.decodeReturnValue('get_state(application)(uint64,uint64,uint64,uint64)', v))
        return this
      },
      /**
       * Add a log_states(uint64[])void method call against the DualstakeFarm contract
       */
      logStates(params: CallParams<DualstakeFarmArgs['obj']['log_states(uint64[])void'] | DualstakeFarmArgs['tuple']['log_states(uint64[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.logStates(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a log_block_proposers(uint64,uint64)void method call against the DualstakeFarm contract
       */
      logBlockProposers(params: CallParams<DualstakeFarmArgs['obj']['log_block_proposers(uint64,uint64)void'] | DualstakeFarmArgs['tuple']['log_block_proposers(uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.logBlockProposers(params)))
        resultMappers.push(undefined)
        return this
      },
      get update() {
        return {
          bare: (params?: AppClientBareCallParams & AppClientCompilationParams ) => {
            promiseChain = promiseChain.then(async () => composer.addAppUpdate(await client.params.update.bare(params)))
            return this
          },
        }
      },
      get delete() {
        return {
          bare: (params?: AppClientBareCallParams ) => {
            promiseChain = promiseChain.then(() => composer.addAppDelete(client.params.delete.bare(params)))
            return this
          },
        }
      },
      /**
       * Add a clear state call to the DualstakeFarm contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as DualstakeFarmComposer
  }
}
export type DualstakeFarmComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the project_apr(application,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  projectApr(params?: CallParams<DualstakeFarmArgs['obj']['project_apr(application,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)'] | DualstakeFarmArgs['tuple']['project_apr(application,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)']>): DualstakeFarmComposer<[...TReturns, DualstakeFarmReturns['project_apr(application,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)'] | undefined]>

  /**
   * Calls the get_algo_cost(application,asset,uint64)(uint64,uint64,uint64,uint64,uint64,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getAlgoCost(params?: CallParams<DualstakeFarmArgs['obj']['get_algo_cost(application,asset,uint64)(uint64,uint64,uint64,uint64,uint64,uint64)'] | DualstakeFarmArgs['tuple']['get_algo_cost(application,asset,uint64)(uint64,uint64,uint64,uint64,uint64,uint64)']>): DualstakeFarmComposer<[...TReturns, DualstakeFarmReturns['get_algo_cost(application,asset,uint64)(uint64,uint64,uint64,uint64,uint64,uint64)'] | undefined]>

  /**
   * Calls the get_algo_cost_and_max_duration(application,asset,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getAlgoCostAndMaxDuration(params?: CallParams<DualstakeFarmArgs['obj']['get_algo_cost_and_max_duration(application,asset,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64)'] | DualstakeFarmArgs['tuple']['get_algo_cost_and_max_duration(application,asset,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64)']>): DualstakeFarmComposer<[...TReturns, DualstakeFarmReturns['get_algo_cost_and_max_duration(application,asset,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64)'] | undefined]>

  /**
   * Calls the create_farm(application,asset,uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createFarm(params?: CallParams<DualstakeFarmArgs['obj']['create_farm(application,asset,uint64,uint64)void'] | DualstakeFarmArgs['tuple']['create_farm(application,asset,uint64,uint64)void']>): DualstakeFarmComposer<[...TReturns, DualstakeFarmReturns['create_farm(application,asset,uint64,uint64)void'] | undefined]>

  /**
   * Calls the extend_duration_blocks(application,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  extendDurationBlocks(params?: CallParams<DualstakeFarmArgs['obj']['extend_duration_blocks(application,uint64)void'] | DualstakeFarmArgs['tuple']['extend_duration_blocks(application,uint64)void']>): DualstakeFarmComposer<[...TReturns, DualstakeFarmReturns['extend_duration_blocks(application,uint64)void'] | undefined]>

  /**
   * Calls the extend_amount_per_block(application,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  extendAmountPerBlock(params?: CallParams<DualstakeFarmArgs['obj']['extend_amount_per_block(application,uint64)void'] | DualstakeFarmArgs['tuple']['extend_amount_per_block(application,uint64)void']>): DualstakeFarmComposer<[...TReturns, DualstakeFarmReturns['extend_amount_per_block(application,uint64)void'] | undefined]>

  /**
   * Calls the payout(application,uint64,bool)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  payout(params?: CallParams<DualstakeFarmArgs['obj']['payout(application,uint64,bool)void'] | DualstakeFarmArgs['tuple']['payout(application,uint64,bool)void']>): DualstakeFarmComposer<[...TReturns, DualstakeFarmReturns['payout(application,uint64,bool)void'] | undefined]>

  /**
   * Calls the noop()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  noop(params?: CallParams<DualstakeFarmArgs['obj']['noop()void'] | DualstakeFarmArgs['tuple']['noop()void']>): DualstakeFarmComposer<[...TReturns, DualstakeFarmReturns['noop()void'] | undefined]>

  /**
   * Calls the withdraw_fees(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  withdrawFees(params?: CallParams<DualstakeFarmArgs['obj']['withdraw_fees(uint64)void'] | DualstakeFarmArgs['tuple']['withdraw_fees(uint64)void']>): DualstakeFarmComposer<[...TReturns, DualstakeFarmReturns['withdraw_fees(uint64)void'] | undefined]>

  /**
   * Calls the optout(asset)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  optout(params?: CallParams<DualstakeFarmArgs['obj']['optout(asset)void'] | DualstakeFarmArgs['tuple']['optout(asset)void']>): DualstakeFarmComposer<[...TReturns, DualstakeFarmReturns['optout(asset)void'] | undefined]>

  /**
   * Calls the update_max_duration_days(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateMaxDurationDays(params?: CallParams<DualstakeFarmArgs['obj']['update_max_duration_days(uint64)void'] | DualstakeFarmArgs['tuple']['update_max_duration_days(uint64)void']>): DualstakeFarmComposer<[...TReturns, DualstakeFarmReturns['update_max_duration_days(uint64)void'] | undefined]>

  /**
   * Calls the update_min_duration_blocks(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateMinDurationBlocks(params?: CallParams<DualstakeFarmArgs['obj']['update_min_duration_blocks(uint64)void'] | DualstakeFarmArgs['tuple']['update_min_duration_blocks(uint64)void']>): DualstakeFarmComposer<[...TReturns, DualstakeFarmReturns['update_min_duration_blocks(uint64)void'] | undefined]>

  /**
   * Calls the get_state(application)(uint64,uint64,uint64,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getState(params?: CallParams<DualstakeFarmArgs['obj']['get_state(application)(uint64,uint64,uint64,uint64)'] | DualstakeFarmArgs['tuple']['get_state(application)(uint64,uint64,uint64,uint64)']>): DualstakeFarmComposer<[...TReturns, DualstakeFarmReturns['get_state(application)(uint64,uint64,uint64,uint64)'] | undefined]>

  /**
   * Calls the log_states(uint64[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  logStates(params?: CallParams<DualstakeFarmArgs['obj']['log_states(uint64[])void'] | DualstakeFarmArgs['tuple']['log_states(uint64[])void']>): DualstakeFarmComposer<[...TReturns, DualstakeFarmReturns['log_states(uint64[])void'] | undefined]>

  /**
   * Calls the log_block_proposers(uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  logBlockProposers(params?: CallParams<DualstakeFarmArgs['obj']['log_block_proposers(uint64,uint64)void'] | DualstakeFarmArgs['tuple']['log_block_proposers(uint64,uint64)void']>): DualstakeFarmComposer<[...TReturns, DualstakeFarmReturns['log_block_proposers(uint64,uint64)void'] | undefined]>

  /**
   * Gets available delete methods
   */
  readonly delete: {
    /**
     * Deletes an existing instance of the DualstakeFarm smart contract using a bare call.
     *
     * @param args The arguments for the bare call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    bare(params?: AppClientBareCallParams ): DualstakeFarmComposer<[...TReturns, undefined]>
  }

  /**
   * Makes a clear_state call to an existing instance of the DualstakeFarm smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): DualstakeFarmComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): DualstakeFarmComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): TransactionComposer
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<DualstakeFarmComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<DualstakeFarmComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<DualstakeFarmComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<DualstakeFarmComposerResults<TReturns>>
}
export type DualstakeFarmComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

